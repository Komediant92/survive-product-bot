import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("BOT_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_state = {}

# –°–æ–±—ã—Ç–∏—è –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
events = [
    {
        "text": "–î–∏–∑–∞–π–Ω–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–¥–∏–∑–∞–π–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
        "options": {
            "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": {"psy": -10, "growth": 0},
            "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å": {"psy": -5, "growth": 5},
            "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ Q3": {"psy": 0, "growth": -5}
        }
    },
    {
        "text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ UX —Ñ–æ—Ä–º—ã. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        "options": {
            "–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–≥—Ñ–∏–∫—Å": {"psy": -5, "growth": 5},
            "–û—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç: ¬´–∑–∞–ø–∏—à–µ–º¬ª": {"psy": 0, "growth": -2},
            "–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": {"psy": -10, "growth": -5}
        }
    }
]

# –ö–Ω–æ–ø–∫–∏
def get_keyboard(options):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        keyboard.add(KeyboardButton(option))
    return keyboard

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_state[message.from_user.id] = {"psy": 100, "growth": 0, "event": 0}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–í—ã–∂–∏–≤–∏ –∫–∞–∫ –ø—Ä–æ–¥–∞–∫—Ç'! üöÄ

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=types.ReplyKeyboardRemove())
    await send_event(message.from_user.id)

@dp.message_handler(commands=["stats"])
async def send_stats(message: types.Message):
    state = user_state.get(message.from_user.id, {})
    await message.answer(f"üß† –ü—Å–∏—Ö–∏–∫–∞: {state.get('psy', 0)}
üìà –†–æ—Å—Ç: {state.get('growth', 0)}")

async def send_event(user_id):
    state = user_state[user_id]
    event_index = state["event"] % len(events)
    event = events[event_index]
    state["current_event"] = event
    keyboard = get_keyboard(event["options"].keys())
    await bot.send_message(user_id, f"{event['text']}", reply_markup=keyboard)

@dp.message_handler()
async def handle_choice(message: types.Message):
    state = user_state.get(message.from_user.id)
    if not state or "current_event" not in state:
        await message.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return
    event = state["current_event"]
    choice = message.text
    if choice not in event["options"]:
        await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return
    outcome = event["options"][choice]
    state["psy"] += outcome["psy"]
    state["growth"] += outcome["growth"]
    state["event"] += 1
    await message.answer(f"üß† {outcome['psy']} –∫ –ø—Å–∏—Ö–∏–∫–µ
üìà {outcome['growth']} –∫ —Ä–æ—Å—Ç—É", reply_markup=types.ReplyKeyboardRemove())
    await send_event(message.from_user.id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
